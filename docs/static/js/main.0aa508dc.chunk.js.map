{"version":3,"sources":["components/AddCategory.js","helpers/GetGrifs.js","components/GifGridItem.js","components/GifGrind.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrind","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAEaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,KAc3C,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACDJ,EAAWK,OAAOC,OAAO,EAAIR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OAAUC,QAAQC,IAAI,eAC1FR,EAAc,KAId,SACI,uBACAS,KAAM,OACNC,MAAOX,EACPY,SAfkB,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,aAmB/Bd,EAAYiB,UAAY,CACpBhB,cAAgBiB,IAAUC,KAAKC,Y,mCC3BtBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAIQ,EAAIG,OAAOC,iBAAiBZ,QAXrB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,gDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B2B,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAd,GACFY,EAAS,CACLf,KAAMG,EACNU,SAAU,SAIvB,CAACpB,IACGqB,EDZuBI,CAAazB,GAA/Ba,EAHwB,EAG7BN,KAAYa,EAHiB,EAGjBA,QAEnB,OACI,qCACA,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAY,iBAAf,2BACZ,qBAAKA,UAAY,OAAjB,SACSH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADEA,EAAIC,aEUfe,EAxBM,WAAO,IAAD,EACa9C,mBAAS,CAAC,UADvB,mBAChB+C,EADgB,KACJhD,EADI,KAMvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQgD,EAAWlB,KAAI,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEAA,SAAYA,GADPA,Y,MCdhC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0aa508dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) =>{\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n       ((inputValue.trim().length>2)? setCategories((cats=>([inputValue, ...cats]))): console.log('Input vacio'));\r\n        setInputValue('');\r\n    }\r\n    \r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type= \"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}/>\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=K5PJw2aMS4kwUW7vlijtElIXhX4Xf3YV`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const {data} =  await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"cajaImg animate__animated animate__fadeInDown\" >\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrind=  ({category}) => {\r\n\r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading && <p className = \"animate__flash\">'Cargando...'</p> }\r\n        <div className = \"caja\">\r\n                {images.map(img => \r\n                    <GifGridItem \r\n                    key= {img.id}\r\n                    {...img }/>\r\n                )}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/GetGrifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(img => {\r\n                setState({\r\n                    data: img ,\r\n                    loading : false\r\n                })\r\n            });\r\n        \r\n    }, [category])\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrind } from './components/GifGrind';\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Flash']);\r\n    \r\n    // const handleAdd = () =>{\r\n    //     setCategories((cats=>([...cats,'Crepuesculo'])));\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                           <GifGrind \r\n                           key={category}\r\n                           category = {category}/>)\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}